{"version":3,"file":"node-renderer.d.ts","sources":["node-renderer.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Renderer, RenderComponentType, RootRenderer } from '@angular/core';\nimport { AnimationDriver, EventManager } from '@angular/platform-browser';\nimport { NodeSharedStylesHost } from './node-shared-styles-host';\nexport declare class NodeDomRootRenderer implements RootRenderer {\n    document: any;\n    eventManager: EventManager;\n    sharedStylesHost: NodeSharedStylesHost;\n    private _animationDriver;\n    protected registeredComponents: Map<string, DomRenderer>;\n    constructor(document: any, eventManager: EventManager, sharedStylesHost: NodeSharedStylesHost, _animationDriver: AnimationDriver);\n    renderComponent(componentProto: RenderComponentType): Renderer;\n}\nexport declare const ATTRIBUTES: {\n    textarea: string[];\n    script: string[];\n    button: string[];\n    fieldset: string[];\n    a: string[];\n    img: string[];\n    input: string[];\n    output: string[];\n    progress: string[];\n    label: string[];\n    option: string[];\n    select: string[];\n    optgroup: string[];\n    form: string[];\n};\nexport declare const IGNORE_ATTRIBUTES: {\n    'innerHTML': boolean;\n    'hidden': boolean;\n};\nexport declare class DomRenderer implements Renderer {\n    private _rootRenderer;\n    private componentProto;\n    private _animationDriver;\n    private _contentAttr;\n    private _hostAttr;\n    private _styles;\n    constructor(_rootRenderer: NodeDomRootRenderer, componentProto: RenderComponentType, _animationDriver: AnimationDriver);\n    selectRootElement(_selectorOrNode: string | any, _debugInfo: any): any;\n    createElement(parent: any, name: string, _debugInfo: any): any;\n    createViewRoot(hostElement: any): any;\n    createTemplateAnchor(parentElement: any, _debugInfo: any): any;\n    createText(parentElement: any, value: string, _debugInfo: any): any;\n    projectNodes(parentElement: any, nodes: any[]): void;\n    attachViewAfter(node: any, viewRootNodes: any[]): void;\n    detachView(viewRootNodes: any[]): void;\n    destroyView(hostElement: any, _viewAllNodes: any[]): void;\n    listen(renderElement: any, name: string, callback: Function): Function;\n    listenGlobal(target: string, name: string, callback: Function): Function;\n    setElementProperty(renderElement: any, propertyName: string, propertyValue: any): void;\n    setElementAttribute(renderElement: any, attributeName: string, attributeValue: string): void;\n    setBindingDebugInfo(renderElement: any, propertyName: string, propertyValue: string): void;\n    setElementClass(renderElement: any, className: string, isAdd: boolean): void;\n    setElementStyle(renderElement: any, styleName: string, styleValue: string): void;\n    invokeElementMethod(renderElement: any, methodName: string, args: any[]): void;\n    setText(renderNode: any, text: string): void;\n    animate(element: any, startingStyles: any, keyframes: any[], duration: number, delay: number, easing: string): any;\n}\nexport declare class NodeDomRenderer extends DomRenderer {\n    __rootRenderer: any;\n    constructor(_rootRenderer: NodeDomRootRenderer, _componentProto: RenderComponentType, _animationDriver: AnimationDriver);\n    selectRootElement(selectorOrNode: string | any, _debugInfo: any): any;\n    _isObject(val: any): boolean;\n    setElementProperty(renderElement: any, propertyName: string, propertyValue: any): void;\n    setElementStyle(renderElement: any, styleName: string, styleValue: string): void;\n    invokeElementMethod(renderElement: any, methodName: string, args: any[]): void;\n    _setDisabledAttribute(renderElement: any, _propertyName: any, propertyValue: any): void;\n    _setCheckedAttribute(renderElement: any, _propertyName: any, propertyValue: any): void;\n    _setOnOffAttribute(renderElement: any, propertyName: any, propertyValue: any): void;\n    _setBooleanAttribute(renderElement: any, propertyName: any, propertyValue: any): void;\n}\nexport declare const COMPONENT_VARIABLE: string;\nexport declare const HOST_ATTR: string;\nexport declare const CONTENT_ATTR: string;\n"]}