{"version":3,"file":"node-platform.d.ts","sources":["node-platform.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA,qCAAqC,+BAAmB;AACxD;;;;AACA;AACA;AACA","sourcesContent":["import { AnimationDriver, EventManager } from '@angular/platform-browser';\nimport { ErrorHandler, Injector, ModuleWithProviders, PlatformRef, NgModuleRef, NgZone, TestabilityRegistry } from '@angular/core';\nimport { NodeSharedStylesHost } from './node-shared-styles-host';\nexport declare function _errorHandler(): ErrorHandler;\nexport declare function _document(domSharedStylesHost: NodeSharedStylesHost, _zone: any): any;\nexport declare function _resolveDefaultAnimationDriver(): AnimationDriver;\nexport declare var __PLATFORM_REF: PlatformRef;\nexport declare function removePlatformRef(): void;\nexport declare function getPlatformRef(): PlatformRef;\nexport declare function setPlatformRef(platformRef: any): void;\nexport declare class NodePlatform {\n    private _platformRef;\n    static _noop: () => void;\n    static _cache: WeakMap<any, any>;\n    readonly platformRef: PlatformRef;\n    constructor(_platformRef: PlatformRef);\n    cacheModuleFactory<T>(moduleType: any, compilerOptions?: any): Promise<NgModuleRef<T>>;\n    serializeModule<T>(ModuleType: any, config?: any): Promise<T>;\n    serializeModuleFactory<T>(ModuleType: any, config?: any): Promise<T> | T;\n    serialize<T>(moduleRef: NgModuleRef<T>, config?: any): Promise<T>;\n    readonly injector: Injector;\n    bootstrapModule<T>(moduleType: any, compilerOptions?: any): Promise<NgModuleRef<T>>;\n    bootstrapModuleFactory<T>(moduleFactory: any): Promise<NgModuleRef<T>>;\n    readonly disposed: boolean;\n    readonly destroyed: boolean;\n    destroy(): void;\n    dispose(): void;\n    registerDisposeListener(dispose: () => void): void;\n    onDestroy(callback: () => void): void;\n}\nexport interface EventManagerPlugin {\n    manager: EventManager | NodeEventManager;\n    supports(eventName: string): boolean;\n    addEventListener(element: any, eventName: string, handler: Function): any;\n    addGlobalEventListener(element: string, eventName: string, handler: Function): any;\n}\nexport declare class NodeEventManager {\n    private _document;\n    private _zone;\n    private _plugins;\n    constructor(plugins: EventManagerPlugin[], _document: any, _zone: NgZone);\n    getWindow(): any;\n    getDocument(): any;\n    getZone(): NgZone;\n    addEventListener(element: any, eventName: string, handler: Function): Function;\n    addGlobalEventListener(target: string, eventName: string, handler: Function): Function;\n    _findPluginFor(eventName: string): EventManagerPlugin;\n}\nexport declare class NodeDomEventsPlugin {\n    manager: NodeEventManager;\n    supports(_eventName: string): boolean;\n    addEventListener(element: any, eventName: string, handler: Function): Function;\n    addGlobalEventListener(target: string, eventName: string, handler: Function): Function;\n}\nexport declare function _APP_BASE_HREF(_zone: any): any;\nexport declare function _REQUEST_URL(_zone: any): any;\nexport declare function _ORIGIN_URL(_zone: any): any;\nexport declare class MockTestabilityRegistry extends TestabilityRegistry {\n    registerApplication(): any;\n}\nexport declare class NodeModule {\n    static forRoot(document: string, config?: any): ModuleWithProviders;\n    static withConfig(config?: any): ModuleWithProviders;\n    constructor(parentModule: NodeModule);\n}\nexport declare const INTERNAL_NODE_PLATFORM_PROVIDERS: Array<any>;\nexport declare const platformNodeDynamic: (extraProviders?: any[], platform?: any) => NodePlatform;\n"]}