{"version":3,"file":"node-http.d.ts","sources":["node-http.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;;;gCAGhC;;;;AACL;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;;;iCAGhC;;;;AACL","sourcesContent":["import { NgZone, EventEmitter } from '@angular/core';\nimport { Http, XHRConnection, ConnectionBackend, XHRBackend, ReadyState, Request, RequestOptions, Response, ResponseOptions, RequestOptionsArgs, BrowserXhr, XSRFStrategy, JSONPBackend } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nexport declare class PreloadHttp extends Http {\n    protected _backend: ConnectionBackend;\n    protected _defaultOptions: RequestOptions;\n    _async: number;\n    constructor(_backend: ConnectionBackend, _defaultOptions: RequestOptions);\n    preload(_url: any, factory: any): EventEmitter<{}>;\n    request(url: string | Request, options?: RequestOptionsArgs): Observable<Response> | EventEmitter<any>;\n    get(url: string, options?: RequestOptionsArgs): Observable<Response> | EventEmitter<any>;\n    post(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> | EventEmitter<any>;\n    put(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> | EventEmitter<any>;\n    delete(url: string, options?: RequestOptionsArgs): Observable<Response> | EventEmitter<any>;\n    patch(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> | EventEmitter<any>;\n    head(url: string, options?: RequestOptionsArgs): Observable<Response> | EventEmitter<any>;\n}\nexport declare class NodeConnection implements XHRConnection {\n    readyState: ReadyState;\n    request: Request;\n    response: Observable<Response> | Observable<any>;\n    constructor(req: Request, baseResponseOptions: ResponseOptions, originUrl?: string, baseUrl?: string);\n    setDetectedContentType: (req: any, _xhr: any) => void;\n}\nexport declare class NodeBackend extends XHRBackend {\n    private baseResponseOptions;\n    private _baseUrl;\n    private _originUrl;\n    constructor(baseResponseOptions: ResponseOptions, _browserXHR: BrowserXhr, _xsrfStrategy: XSRFStrategy, _ngZone: NgZone, _baseUrl: string, _originUrl: string);\n    createConnection(request: Request): NodeConnection;\n}\nexport declare class NodeJSONPConnection {\n    readyState: ReadyState;\n    request: Request;\n    response: Observable<Response> | Observable<any>;\n    constructor(req: Request, baseResponseOptions: ResponseOptions, ngZone: NgZone, originUrl?: string, baseUrl?: string);\n}\nexport declare abstract class NodeJsonpBackend extends ConnectionBackend {\n}\nexport declare class NodeJsonpBackend_ extends NodeJsonpBackend {\n    private _baseResponseOptions;\n    private _ngZone;\n    private _baseUrl;\n    private _originUrl;\n    constructor(_baseResponseOptions: ResponseOptions, _ngZone: NgZone, _baseUrl: string, _originUrl: string);\n    createConnection(request: Request): NodeJSONPConnection;\n}\nexport declare function _noop(): void;\nexport declare const NODE_HTTP_PROVIDERS_COMMON: Array<any>;\nexport declare const NODE_HTTP_PROVIDERS: any[];\nexport declare const NODE_JSONP_PROVIDERS: any[];\nexport declare function httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions): PreloadHttp;\nexport declare function jsonpFactory(jsonpBackend: JSONPBackend, requestOptions: RequestOptions): PreloadHttp;\nexport declare class NodeHttpModule {\n    static forRoot(config?: any): {\n        ngModule: typeof NodeHttpModule;\n        providers: any[];\n    };\n    static withConfig(config?: any): {\n        ngModule: typeof NodeHttpModule;\n        providers: any[];\n    };\n}\nexport declare class NodeJsonpModule {\n    static forRoot(config?: any): {\n        ngModule: typeof NodeJsonpModule;\n        providers: any[];\n    };\n    static withConfig(config?: any): {\n        ngModule: typeof NodeJsonpModule;\n        providers: any[];\n    };\n}\n"]}