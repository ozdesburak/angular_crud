import { NgZone, ModuleWithProviders, OpaqueToken } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/of';
import * as ɵngcc0 from '@angular/core';
export declare const REQUEST_IDLE_CALLBACK: OpaqueToken;
export declare function _requestIdle(zone: NgZone): (fn: any) => any;
export declare class IdlePreload {
    private _ngZone;
    private requestIdleCallback;
    constructor(_ngZone: NgZone, requestIdleCallback: any);
    preload(route: any, fn: () => Observable<any>): Observable<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IdlePreload, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDeclaration<IdlePreload>;
}
export declare const ANGULARCLASS_IDLE_PRELOAD_PROVIDERS: any[];
export declare const ANGULARCLASS_REQUEST_IDLE_CALLBACK_PROVIDERS: any[];
export declare class IdlePreloadModule {
    static forRoot(config?: any): ModuleWithProviders<IdlePreloadModule>;
    static IdleStrategy(): typeof IdlePreload;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IdlePreloadModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDeclaration<IdlePreloadModule, never, never, never>;
    static ɵinj: ɵngcc0.ɵɵInjectorDeclaration<IdlePreloadModule>;
}

//# sourceMappingURL=index.d.ts.map