/*
 * @AngularClass
 */
"use strict";
var core_1 = require('@angular/core');
// import { PreloadingStrategy, Route } from '@angular/router';
var Observable_1 = require('rxjs/Observable');
require('rxjs/add/observable/of');
/*
 * token to requestIdleCallback
 */
exports.REQUEST_IDLE_CALLBACK = new core_1.OpaqueToken('REQUEST_IDLE_CALLBACK');
/*
 * Private please use @angularclass/request-idle-callback if you want to use this
 */
function _requestIdle(zone) {
    var win = window;
    if (win.requestIdleCallback) {
        return function (fn) { return win.requestIdleCallback(fn); };
    }
    return function (fn) { return zone.runOutsideAngular(function () { return win.setTimeout(fn, 10); }); };
}
exports._requestIdle = _requestIdle;
var IdlePreload /*implements PreloadingStrategy*/ = (function () {
    /*
     * include zone to run outside of zone.js
     */
    function IdlePreload /*implements PreloadingStrategy*/(_ngZone, requestIdleCallback) {
        this._ngZone = _ngZone;
        this.requestIdleCallback = requestIdleCallback;
    }
    /*
     * fire off preloading async modules
     */
    IdlePreload /*implements PreloadingStrategy*/.prototype.preload = function (route, fn) {
        this.requestIdleCallback(fn);
        return Observable_1.Observable.of(null);
    };
    IdlePreload /*implements PreloadingStrategy*/.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    IdlePreload /*implements PreloadingStrategy*/.ctorParameters = [
        { type: core_1.NgZone, },
        { type: undefined, decorators: [{ type: core_1.Inject, args: [exports.REQUEST_IDLE_CALLBACK,] },] },
    ];
    return IdlePreload /*implements PreloadingStrategy*/;
}());
exports.IdlePreload /*implements PreloadingStrategy*/ = IdlePreload /*implements PreloadingStrategy*/;
/*
 * raw providers
 */
exports.ANGULARCLASS_IDLE_PRELOAD_PROVIDERS = [
    { provide: IdlePreload, useClass: IdlePreload }
];
exports.ANGULARCLASS_REQUEST_IDLE_CALLBACK_PROVIDERS = [
    { provide: exports.REQUEST_IDLE_CALLBACK, useFactory: _requestIdle, deps: [core_1.NgZone] }
];
var IdlePreloadModule = (function () {
    function IdlePreloadModule() {
    }
    /*
     * forRoot() to allow providers only be created once
     */
    IdlePreloadModule.forRoot = function (config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: IdlePreloadModule,
            providers: (config.requestIdleCallback === false ? [] : exports.ANGULARCLASS_REQUEST_IDLE_CALLBACK_PROVIDERS).concat(exports.ANGULARCLASS_IDLE_PRELOAD_PROVIDERS)
        };
    };
    /*
     * alias for reference to IdlePreload token
     */
    IdlePreloadModule.IdleStrategy = function () {
        return IdlePreload;
    };
    IdlePreloadModule.decorators = [
        { type: core_1.NgModule, args: [{},] },
    ];
    /** @nocollapse */
    IdlePreloadModule.ctorParameters = [];
    return IdlePreloadModule;
}());
exports.IdlePreloadModule = IdlePreloadModule;
//# sourceMappingURL=index.js.map